eCommerce App Summary - PHP, Bootstrap, JS, jQuery, AJAX

Goal:
-----
Build a modular, secure, and responsive eCommerce website using HTML, Bootstrap, JavaScript, jQuery, AJAX, and PHP. Follow SOLID principles and good code practices.

Project Structure (Follows SOLID):
----------------------------------
ecommerce-app/
│
├── classes/           → PHP classes (User.php, Product.php, Cart.php, DB.php, Utils.php)
├── ajax/              → AJAX handlers (cart_handler.php, product_filter.php)
├── includes/          → Reusable parts (header.php, footer.php)
├── public/            → Frontend files (index.php, login.php, cart.php, etc.)
├── config/            → Configuration files (DB settings)
├── assets/            → JS, CSS, images
└── logs/              → Error logs

Core Features:
--------------
- User Authentication (Register, Login, Logout)
- Product Listing (View, Search, Filter, Pagination)
- Cart System (Add, Remove, Update Quantity - with AJAX)
- Checkout and Place Order
- Admin Panel (Manage Products and View Orders)
- Order History (For users and admin)
- AJAX: Cart updates, live search, filters

Technologies:
-------------
Frontend  - HTML, Bootstrap, JavaScript, jQuery, AJAX
Backend   - PHP (OOP style), PDO for MySQL
Database  - MySQL (with tables like users, products, orders, cart_items)

SOLID Principles (Summary):
---------------------------
S - Single Responsibility: Each class does one thing only.
O - Open/Closed: Classes can be extended, not modified directly.
L - Liskov Substitution: Subclasses should be replaceable by parent.
I - Interface Segregation: Keep interfaces small and focused.
D - Dependency Inversion: Inject dependencies (like DB) instead of hardcoding.

Utility Class - Utils.php:
---------------------------
Use this for common, reusable functions:
- sanitize(): Clean user input
- redirect(): Redirect to another page
- formatPrice(): Format numbers into currency
- isLoggedIn(): Check if user is logged in
- generateOrderId(): Create random order IDs
- logError(): Write errors to log

Example:
$name = Utils::sanitize($_POST['name']);
Utils::redirect('login.php');

Security Best Practices:
------------------------
- Use prepared statements (PDO) to prevent SQL injection
- Sanitize all inputs
- Use password_hash() and password_verify() for passwords
- Regenerate session ID on login
- Role-based access checks (Admin vs User)
- Escape output using htmlspecialchars
- Add CSRF tokens to forms (optional)

Frontend/UX Best Practices:
---------------------------
- Use Bootstrap grid system and responsive classes
- Keep JS in external files
- Use jQuery and AJAX to update cart, filters, etc.
- Provide real-time feedback (e.g., "Item added to cart")
- Validate forms on both client and server side
- Disable buttons during submission to avoid duplicates

Database Best Practices:
------------------------
- Use foreign keys for relationships
- Normalize tables (users, products, orders, order_items, cart_items)
- Use indexes on searchable fields
- Use LIMIT and pagination for performance

Error Handling:
---------------
- Use try/catch around risky operations
- Log errors using Utils::logError()
- Show user-friendly error messages
- Hide raw errors in production

Maintainability Tips:
---------------------
- Comment WHY, not just WHAT
- Use descriptive variable and function names
- Break code into small, focused functions
- Separate logic from HTML (use classes)
- Keep files and folders well organized

Bonus Features to Impress:
--------------------------
- Wishlist functionality
- Product reviews and ratings
- Admin dashboard with order stats
- Live AJAX search
- Email notifications for order confirmation

Suggested Development Order:
----------------------------
1. Design the database
2. Create the DB and Utils classes
3. Build user auth (register/login)
4. Build product listing (with filters/search)
5. Implement cart and checkout (with AJAX)
6. Add admin features (product management)
7. Secure the site and test

End of Summary
